"""
Script para testar o sistema completo e demonstrar persist√™ncia dos CSVs
"""

import sys
import os

# Adiciona o diret√≥rio raiz ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from dao.responsavel_dao import ResponsavelDAO
from dao.bombona_dao import BombonaDAO
from controllers.responsavel_controller import ResponsavelController
from controllers.bombona_controller import BombonaController


def verificar_arquivos_existentes():
    """Verifica se j√° existem dados nos arquivos CSV."""
    
    print("=== VERIFICA√á√ÉO DE DADOS EXISTENTES ===\n")
    
    # Verifica responsaveis.csv
    arquivo_resp = "data/responsaveis.csv"
    if os.path.exists(arquivo_resp):
        with open(arquivo_resp, 'r', encoding='utf-8') as f:
            linhas = f.readlines()
            dados = len(linhas) - 1  # Subtrai cabe√ßalho
            print(f"   üìÑ {arquivo_resp}: {dados} respons√°vel(is) encontrado(s)")
    else:
        print(f"   üìÑ {arquivo_resp}: Arquivo n√£o existe")
    
    # Verifica bombonas.csv
    arquivo_bomb = "data/bombonas.csv"
    if os.path.exists(arquivo_bomb):
        with open(arquivo_bomb, 'r', encoding='utf-8') as f:
            linhas = f.readlines()
            dados = len(linhas) - 1  # Subtrai cabe√ßalho
            print(f"   üìÑ {arquivo_bomb}: {dados} bombona(s) encontrada(s)")
    else:
        print(f"   üìÑ {arquivo_bomb}: Arquivo n√£o existe")
    
    print()


def testar_persistencia():
    """Testa a persist√™ncia dos dados."""
    
    print("=== TESTE DE PERSIST√äNCIA DOS DADOS ===\n")
    
    try:
        # 1. Inicializar DAOs e Controllers
        print("1. Inicializando sistema...")
        responsavel_dao = ResponsavelDAO()
        bombona_dao = BombonaDAO(responsavel_dao=responsavel_dao)
        responsavel_controller = ResponsavelController(responsavel_dao, bombona_dao)
        bombona_controller = BombonaController(bombona_dao, responsavel_dao)
        
        # 2. Verificar dados existentes antes de adicionar
        print("\n2. Verificando dados j√° existentes...")
        responsaveis_existentes = responsavel_controller.listar_responsaveis()
        bombonas_existentes = bombona_controller.listar_bombonas()
        
        print(f"   Respons√°veis j√° cadastrados: {len(responsaveis_existentes)}")
        print(f"   Bombonas j√° cadastradas: {len(bombonas_existentes)}")
        
        # 3. Adicionar novos dados (se n√£o existirem)
        print("\n3. Adicionando novos dados...")
        
        # Lista de respons√°veis para testar
        responsaveis_teste = [
            {
                "cpf": "111.444.777-35",
                "nome": "Dr. Jo√£o Silva",
                "telefone": "(11) 9 8765-4321",
                "setor": "LABORAT√ìRIO"
            },
            {
                "cpf": "529.982.247-25",
                "nome": "Dra. Maria Santos",
                "telefone": "(11) 9 9999-8888",
                "setor": "QU√çMICA"
            }
        ]
        
        # Tentar cadastrar respons√°veis
        for resp_data in responsaveis_teste:
            try:
                sucesso = responsavel_controller.cadastrar_responsavel(
                    resp_data["cpf"],
                    resp_data["nome"],
                    resp_data["telefone"],
                    resp_data["setor"]
                )
                if sucesso:
                    print(f"   ‚úì Respons√°vel {resp_data['nome']} cadastrado")
            except ValueError as e:
                if "J√° existe" in str(e):
                    print(f"   ‚ÑπÔ∏è  Respons√°vel {resp_data['nome']} j√° existe (CORRETO - dados persistentes!)")
                else:
                    print(f"   ‚úó Erro ao cadastrar {resp_data['nome']}: {e}")
            except Exception as e:
                print(f"   ‚úó Erro inesperado: {e}")
        
        # Lista de bombonas para testar
        bombonas_teste = [
            {
                "codigo": "LAB-001",
                "volume": 25.5,
                "tipo_residuo": "√ÅCIDO",
                "cpf": "11144477735"  # Dr. Jo√£o Silva
            },
            {
                "codigo": "QUI-001",
                "volume": 50.0,
                "tipo_residuo": "BASE",
                "cpf": "52998224725"  # Dra. Maria Santos
            }
        ]
        
        # Tentar cadastrar bombonas
        for bomb_data in bombonas_teste:
            try:
                sucesso = bombona_controller.cadastrar_bombona(
                    bomb_data["codigo"],
                    bomb_data["volume"],
                    bomb_data["tipo_residuo"],
                    bomb_data["cpf"]
                )
                if sucesso:
                    print(f"   ‚úì Bombona {bomb_data['codigo']} cadastrada")
            except ValueError as e:
                if "J√° existe" in str(e):
                    print(f"   ‚ÑπÔ∏è  Bombona {bomb_data['codigo']} j√° existe (CORRETO - dados persistentes!)")
                elif "n√£o encontrado" in str(e):
                    print(f"   ‚ö†Ô∏è  Respons√°vel n√£o encontrado para bombona {bomb_data['codigo']}")
                else:
                    print(f"   ‚úó Erro ao cadastrar {bomb_data['codigo']}: {e}")
            except Exception as e:
                print(f"   ‚úó Erro inesperado: {e}")
        
        # 4. Verificar dados ap√≥s tentativa de inser√ß√£o
        print("\n4. Verificando dados ap√≥s inser√ß√£o...")
        responsaveis_finais = responsavel_controller.listar_responsaveis()
        bombonas_finais = bombona_controller.listar_bombonas()
        
        print(f"   Total de respons√°veis: {len(responsaveis_finais)}")
        for resp in responsaveis_finais:
            cpf_formatado = responsavel_controller.formatar_cpf_para_exibicao(resp.get_cpf())
            print(f"   - {resp.get_nome()} | CPF: {cpf_formatado} | Setor: {resp.get_setor()}")
        
        print(f"\n   Total de bombonas: {len(bombonas_finais)}")
        for bomb in bombonas_finais:
            responsavel = bomb.get_responsavel()
            resp_nome = responsavel.get_nome() if responsavel else "N/A"
            print(f"   - {bomb.get_codigo()} | {bomb.get_volume()}L | {bomb.get_tipo_residuo()} | Resp: {resp_nome}")
        
        # 5. Testar persist√™ncia reinicializando o sistema
        print("\n5. Testando persist√™ncia - reinicializando sistema...")
        
        # Simula reinicializa√ß√£o criando novos objetos
        novo_responsavel_dao = ResponsavelDAO()
        novo_bombona_dao = BombonaDAO(responsavel_dao=novo_responsavel_dao)
        novo_responsavel_controller = ResponsavelController(novo_responsavel_dao, novo_bombona_dao)
        novo_bombona_controller = BombonaController(novo_bombona_dao, novo_responsavel_dao)
        
        # Verifica se os dados persistiram
        responsaveis_persistidos = novo_responsavel_controller.listar_responsaveis()
        bombonas_persistidas = novo_bombona_controller.listar_bombonas()
        
        print(f"   Respons√°veis carregados ap√≥s reinicializa√ß√£o: {len(responsaveis_persistidos)}")
        print(f"   Bombonas carregadas ap√≥s reinicializa√ß√£o: {len(bombonas_persistidas)}")
        
        if len(responsaveis_persistidos) == len(responsaveis_finais) and len(bombonas_persistidas) == len(bombonas_finais):
            print("   ‚úÖ PERSIST√äNCIA FUNCIONANDO CORRETAMENTE!")
        else:
            print("   ‚ùå PROBLEMA NA PERSIST√äNCIA!")
        
        # 6. Gerar estat√≠sticas
        print("\n6. Estat√≠sticas do sistema...")
        stats_bombonas = novo_bombona_controller.get_estatisticas()
        stats_responsaveis = novo_responsavel_controller.get_estatisticas()
        
        print(f"   üìä Total de bombonas: {stats_bombonas['total_bombonas']}")
        print(f"   üìä Volume total: {stats_bombonas['volume_total']} L")
        print(f"   üìä Total de respons√°veis: {stats_responsaveis['total_responsaveis']}")
        
        # 7. Testar opera√ß√µes CRUD
        print("\n7. Testando opera√ß√µes CRUD...")
        
        # Tentar buscar um respons√°vel espec√≠fico
        responsavel_teste = novo_responsavel_controller.buscar_responsavel("11144477735")
        if responsavel_teste:
            print(f"   üîç Busca respons√°vel: {responsavel_teste.get_nome()} encontrado")
            
            # Buscar bombonas deste respons√°vel
            bombonas_resp = novo_bombona_controller.buscar_bombonas_por_cpf_responsavel("11144477735")
            print(f"   üîç Bombonas deste respons√°vel: {len(bombonas_resp)}")
        else:
            print("   üîç Respons√°vel de teste n√£o encontrado")
        
        print("\n=== TESTE DE PERSIST√äNCIA CONCLU√çDO ===")
        
    except Exception as e:
        print(f"\n‚ùå ERRO DURANTE O TESTE: {e}")
        import traceback
        traceback.print_exc()


def demonstrar_adicao_incremental():
    """Demonstra que novos dados s√£o adicionados aos existentes."""
    
    print("\n=== DEMONSTRA√á√ÉO DE ADI√á√ÉO INCREMENTAL ===\n")
    
    try:
        # Inicializa sistema
        responsavel_dao = ResponsavelDAO()
        bombona_dao = BombonaDAO(responsavel_dao=responsavel_dao)
        responsavel_controller = ResponsavelController(responsavel_dao, bombona_dao)
        bombona_controller = BombonaController(bombona_dao, responsavel_dao)
        
        # Conta dados atuais
        responsaveis_antes = len(responsavel_controller.listar_responsaveis())
        bombonas_antes = len(bombona_controller.listar_bombonas())
        
        print(f"Dados ANTES da adi√ß√£o:")
        print(f"   Respons√°veis: {responsaveis_antes}")
        print(f"   Bombonas: {bombonas_antes}")
        
        # Tenta adicionar um novo respons√°vel √∫nico
        import time
        timestamp = str(int(time.time()))[-4:]  # √öltimos 4 d√≠gitos do timestamp
        
        try:
            novo_cpf = f"111.222.333-9{timestamp[-1]}"  # CPF √∫nico baseado no timestamp
            # Gera um CPF v√°lido simples para teste
            if timestamp[-1] == "0":
                novo_cpf = "11122233396"
            elif timestamp[-1] == "1":
                novo_cpf = "22233344407"
            elif timestamp[-1] == "2":
                novo_cpf = "33344455518"
            else:
                novo_cpf = "44455566629"
            
            sucesso = responsavel_controller.cadastrar_responsavel(
                novo_cpf,
                f"Novo Respons√°vel {timestamp}",
                "11999999999",
                "OUTROS"
            )
            
            if sucesso:
                print(f"\n‚úì Novo respons√°vel adicionado: Novo Respons√°vel {timestamp}")
                
                # Tenta adicionar uma bombona para este respons√°vel
                sucesso_bomb = bombona_controller.cadastrar_bombona(
                    f"TEST-{timestamp}",
                    10.0,
                    "OUTROS",
                    novo_cpf.replace(".", "").replace("-", "")
                )
                
                if sucesso_bomb:
                    print(f"‚úì Nova bombona adicionada: TEST-{timestamp}")
        
        except Exception as e:
            print(f"‚ÑπÔ∏è  Dados j√° existem ou erro esperado: {e}")
        
        # Conta dados depois
        responsaveis_depois = len(responsavel_controller.listar_responsaveis())
        bombonas_depois = len(bombona_controller.listar_bombonas())
        
        print(f"\nDados DEPOIS da tentativa de adi√ß√£o:")
        print(f"   Respons√°veis: {responsaveis_depois}")
        print(f"   Bombonas: {bombonas_depois}")
        
        print(f"\nVaria√ß√£o:")
        print(f"   Respons√°veis: +{responsaveis_depois - responsaveis_antes}")
        print(f"   Bombonas: +{bombonas_depois - bombonas_antes}")
        
    except Exception as e:
        print(f"‚ùå Erro na demonstra√ß√£o: {e}")


def main():
    """Fun√ß√£o principal."""
    
    # Verifica dados existentes
    verificar_arquivos_existentes()
    
    # Testa persist√™ncia
    testar_persistencia()
    
    # Demonstra adi√ß√£o incremental
    demonstrar_adicao_incremental()
    
    print("\n" + "="*60)
    print("üéØ RESUMO:")
    print("‚Ä¢ Os dados agora s√£o PERSISTENTES entre execu√ß√µes")
    print("‚Ä¢ Novos dados s√£o ADICIONADOS aos existentes")
    print("‚Ä¢ CSVs mant√™m o hist√≥rico de todas as opera√ß√µes")
    print("‚Ä¢ Execute 'python main.py' para usar a interface gr√°fica")
    print("="*60)


if __name__ == "__main__":
    main()
    """
    Script para testar o sistema completo e popular os CSVs
    """

import sys
import os

# Adiciona o diret√≥rio raiz ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from dao.responsavel_dao import ResponsavelDAO
from dao.bombona_dao import BombonaDAO
from controllers.responsavel_controller import ResponsavelController
from controllers.bombona_controller import BombonaController


def teste_completo_sistema():
    """Testa o sistema completo e popula os CSVs."""
    
    print("=== TESTE COMPLETO DO SISTEMA ===\n")
    
    try:
        # 1. Inicializar DAOs
        print("1. Inicializando DAOs...")
        responsavel_dao = ResponsavelDAO()
        bombona_dao = BombonaDAO(responsavel_dao=responsavel_dao)
        
        # 2. Inicializar Controllers
        print("2. Inicializando Controllers...")
        responsavel_controller = ResponsavelController(responsavel_dao, bombona_dao)
        bombona_controller = BombonaController(bombona_dao, responsavel_dao)
        
        # 3. Cadastrar alguns respons√°veis
        print("\n3. Cadastrando respons√°veis...")
        
        responsaveis_teste = [
            {
                "cpf": "111.444.777-35",
                "nome": "Dr. Jo√£o Silva",
                "telefone": "(11) 9 8765-4321",
                "setor": "LABORAT√ìRIO"
            },
            {
                "cpf": "529.982.247-25",
                "nome": "Dra. Maria Santos",
                "telefone": "(11) 9 9999-8888",
                "setor": "QU√çMICA"
            },
            {
                "cpf": "123.456.789-09",
                "nome": "Prof. Carlos Oliveira",
                "telefone": "(11) 9 7777-6666",
                "setor": "BIOLOGIA"
            },
            {
                "cpf": "987.654.321-00",
                "nome": "Ana Costa Lima",
                "telefone": "(11) 9 5555-4444",
                "setor": "F√çSICA"
            }
        ]
        
        for resp_data in responsaveis_teste:
            try:
                sucesso = responsavel_controller.cadastrar_responsavel(
                    resp_data["cpf"],
                    resp_data["nome"],
                    resp_data["telefone"],
                    resp_data["setor"]
                )
                if sucesso:
                    print(f"   ‚úì Respons√°vel {resp_data['nome']} cadastrado com sucesso")
                else:
                    print(f"   ‚úó Erro ao cadastrar {resp_data['nome']}")
            except Exception as e:
                print(f"   ‚úó Erro ao cadastrar {resp_data['nome']}: {e}")
        
        # 4. Listar respons√°veis cadastrados
        print("\n4. Listando respons√°veis cadastrados...")
        responsaveis = responsavel_controller.listar_responsaveis()
        print(f"   Total de respons√°veis: {len(responsaveis)}")
        for resp in responsaveis:
            cpf_formatado = responsavel_controller.formatar_cpf_para_exibicao(resp.get_cpf())
            tel_formatado = responsavel_controller.formatar_telefone_para_exibicao(resp.get_telefone())
            print(f"   - {resp.get_nome()} | CPF: {cpf_formatado} | Tel: {tel_formatado} | Setor: {resp.get_setor()}")
        
        # 5. Cadastrar algumas bombonas
        print("\n5. Cadastrando bombonas...")
        
        bombonas_teste = [
            {
                "codigo": "LAB-001",
                "volume": 25.5,
                "tipo_residuo": "√ÅCIDO",
                "cpf": "11144477735"  # Dr. Jo√£o Silva
            },
            {
                "codigo": "LAB-002",
                "volume": 50.0,
                "tipo_residuo": "BASE",
                "cpf": "11144477735"  # Dr. Jo√£o Silva
            },
            {
                "codigo": "QUI-001",
                "volume": 75.5,
                "tipo_residuo": "SOLVENTE",
                "cpf": "52998224725"  # Dra. Maria Santos
            },
            {
                "codigo": "BIO-001",
                "volume": 30.0,
                "tipo_residuo": "ORG√ÇNICO",
                "cpf": "12345678909"  # Prof. Carlos Oliveira
            },
            {
                "codigo": "FIS-001",
                "volume": 100.0,
                "tipo_residuo": "METAL PESADO",
                "cpf": "98765432100"  # Ana Costa Lima
            },
            {
                "codigo": "LAB-003",
                "volume": 15.0,
                "tipo_residuo": "INFLAM√ÅVEL",
                "cpf": "11144477735"  # Dr. Jo√£o Silva
            }
        ]
        
        for bomb_data in bombonas_teste:
            try:
                sucesso = bombona_controller.cadastrar_bombona(
                    bomb_data["codigo"],
                    bomb_data["volume"],
                    bomb_data["tipo_residuo"],
                    bomb_data["cpf"]
                )
                if sucesso:
                    print(f"   ‚úì Bombona {bomb_data['codigo']} cadastrada com sucesso")
                else:
                    print(f"   ‚úó Erro ao cadastrar {bomb_data['codigo']}")
            except Exception as e:
                print(f"   ‚úó Erro ao cadastrar {bomb_data['codigo']}: {e}")
        
        # 6. Listar bombonas cadastradas
        print("\n6. Listando bombonas cadastradas...")
        bombonas = bombona_controller.listar_bombonas()
        print(f"   Total de bombonas: {len(bombonas)}")
        for bomb in bombonas:
            responsavel = bomb.get_responsavel()
            resp_nome = responsavel.get_nome() if responsavel else "N/A"
            print(f"   - {bomb.get_codigo()} | {bomb.get_volume()}L | {bomb.get_tipo_residuo()} | Resp: {resp_nome}")
        
        # 7. Testar busca por respons√°vel
        print("\n7. Testando busca de bombonas por respons√°vel...")
        cpf_teste = "11144477735"  # Dr. Jo√£o Silva
        bombonas_responsavel = bombona_controller.buscar_bombonas_por_cpf_responsavel(cpf_teste)
        print(f"   Bombonas do Dr. Jo√£o Silva: {len(bombonas_responsavel)}")
        for bomb in bombonas_responsavel:
            print(f"   - {bomb.get_codigo()} | {bomb.get_volume()}L | {bomb.get_tipo_residuo()}")
        
        # 8. Gerar estat√≠sticas
        print("\n8. Gerando estat√≠sticas...")
        stats_bombonas = bombona_controller.get_estatisticas()
        stats_responsaveis = responsavel_controller.get_estatisticas()
        
        print(f"   Total de bombonas: {stats_bombonas['total_bombonas']}")
        print(f"   Volume total: {stats_bombonas['volume_total']} L")
        print(f"   Volume m√©dio: {stats_bombonas['volume_medio']} L")
        print(f"   Total de respons√°veis: {stats_responsaveis['total_responsaveis']}")
        
        print("\n   Bombonas por tipo de res√≠duo:")
        for tipo, qtd in stats_bombonas['tipos_residuo'].items():
            print(f"   - {tipo}: {qtd}")
        
        print("\n   Respons√°veis por setor:")
        for setor, qtd in stats_responsaveis['responsaveis_por_setor'].items():
            print(f"   - {setor}: {qtd}")
        
        # 9. Gerar relat√≥rios
        print("\n9. Gerando relat√≥rios...")
        try:
            arquivo_csv = bombona_controller.gerar_relatorio("csv")
            print(f"   ‚úì Relat√≥rio CSV gerado: {arquivo_csv}")
            
            arquivo_txt = bombona_controller.gerar_relatorio("txt")
            print(f"   ‚úì Relat√≥rio TXT gerado: {arquivo_txt}")
        except Exception as e:
            print(f"   ‚úó Erro ao gerar relat√≥rios: {e}")
        
        # 10. Verificar arquivos CSV
        print("\n10. Verificando arquivos CSV...")
        
        # Verifica responsaveis.csv
        if os.path.exists("data/responsaveis.csv"):
            with open("data/responsaveis.csv", 'r', encoding='utf-8') as f:
                linhas = f.readlines()
                print(f"   ‚úì responsaveis.csv criado com {len(linhas)} linhas")
        else:
            print("   ‚úó responsaveis.csv n√£o encontrado")
        
        # Verifica bombonas.csv
        if os.path.exists("data/bombonas.csv"):
            with open("data/bombonas.csv", 'r', encoding='utf-8') as f:
                linhas = f.readlines()
                print(f"   ‚úì bombonas.csv criado com {len(linhas)} linhas")
        else:
            print("   ‚úó bombonas.csv n√£o encontrado")
        
        print("\n=== TESTE CONCLU√çDO COM SUCESSO! ===")
        print("\nOs arquivos CSV agora devem estar populados com dados de teste.")
        print("Voc√™ pode executar 'python main.py' para ver a interface gr√°fica.")
        
    except Exception as e:
        print(f"\n‚úó ERRO DURANTE O TESTE: {e}")
        import traceback
        traceback.print_exc()


def limpar_dados():
    """Limpa os dados existentes (para recriar do zero)."""
    
    print("=== LIMPANDO DADOS EXISTENTES ===")
    
    arquivos = [
        "data/responsaveis.csv",
        "data/bombonas.csv",
        "data/relatorio_bombonas.csv",
        "data/relatorio_bombonas.txt"
    ]
    
    for arquivo in arquivos:
        if os.path.exists(arquivo):
            os.remove(arquivo)
            print(f"   ‚úì Arquivo {arquivo} removido")
        else:
            print(f"   - Arquivo {arquivo} n√£o existe")
    
    print("   Dados limpos!\n")


def main():
    """Fun√ß√£o principal."""
    
    # Pergunta se quer limpar dados primeiro
    resposta = input("Deseja limpar os dados existentes antes do teste? (s/n): ").lower().strip()
    if resposta in ['s', 'sim', 'y', 'yes']:
        limpar_dados()
    
    # Executa o teste completo
    teste_completo_sistema()


if __name__ == "__main__":
    main()